{{/* -------------------------------------------------------------------
     DEPLOYMENT - Postgres
     -------------------------------------------------------------------
     - Pods are labelled <release>-mcp-stack-postgres so the Service
       selector (also templated) matches correctly.
     - Adds exec-based readiness & liveness probes (pg_isready).
     - Adds resource requests / limits pulled from values.yaml.
     ------------------------------------------------------------------- */}}

{{- if .Values.postgres.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  # <release>-mcp-stack-postgres
  name: {{ include "mcp-stack.fullname" . }}-postgres
  labels:
    {{- include "mcp-stack.labels" . | nindent 4 }}
    app: {{ include "mcp-stack.fullname" . }}-postgres
spec:
  replicas: 1                   # one DB pod; use StatefulSet if you ever scale
  selector:
    matchLabels:
      app: {{ include "mcp-stack.fullname" . }}-postgres
  template:
    metadata:
      labels:
        app: {{ include "mcp-stack.fullname" . }}-postgres
    spec:
      # Image pull secrets
      {{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- range .Values.global.imagePullSecrets }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
      containers:
        - name: postgres
          image: "{{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}"
          imagePullPolicy: "{{ .Values.postgres.image.pullPolicy }}"

          # Expose Postgres TCP port inside the pod
          ports:
            - containerPort: {{ .Values.postgres.service.port }}

          # ─── Readiness probe ───
          {{- with .Values.postgres.probes.readiness }}
          readinessProbe:
{{- include "helpers.renderProbe" (dict "probe" . "root" $) | nindent 12 }}
          {{- end }}

          # ─── Liveness probe ───
          {{- with .Values.postgres.probes.liveness }}
          livenessProbe:
{{- include "helpers.renderProbe" (dict "probe" . "root" $) | nindent 12 }}
          {{- end }}

          # ConfigMap holds non-secret tuning (postgresql.conf, etc.)
          # Secret stores POSTGRES_USER / POSTGRES_PASSWORD.
          envFrom:
            - configMapRef:
                name: postgres-config
            - secretRef:
                name: {{ include "mcp-stack.postgresSecretName" . | trim | quote }}

          # Set PGDATA to a subdirectory to avoid mount point issues
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata

          # Mount PVC for data durability
          volumeMounts:
            - name: postgredb
              mountPath: /var/lib/postgresql/data

          # ─── Resource limits & requests ───
          resources:
{{- toYaml .Values.postgres.resources | nindent 12 }}

      volumes:
        - name: postgredb
          {{- if .Values.postgres.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "mcp-stack.fullname" . }}-postgres-pvc
          {{- else }}
          emptyDir: {}
          {{- end }}
{{- end }}
